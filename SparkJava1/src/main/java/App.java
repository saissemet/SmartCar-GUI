
import static spark.Spark.*;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.smartcar.sdk.*;
import com.smartcar.sdk.data.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author enta
 */
public class App extends javax.swing.JFrame {

    private final AuthClient client;
    private String access;
    private static Gson gson = new Gson();

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        port(8000);
        String clientId = "214f3240-1469-4096-9f9f-7b34f328d861";
        String clientSecret = "def37d07-726e-40a9-ad2d-a39279edd79c";
        String redirectUri = "http://localhost:8000/callback";
        String[] scope = {"read_engine_oil read_battery read_charge read_fuel read_location control_security read_odometer read_tires read_vehicle_info read_vin"};

        boolean testMode = true;

        client = new AuthClient(
                clientId,
                clientSecret,
                redirectUri,
                scope,
                testMode
        );
        CarController cc = new CarController();
        cc.getAccess(client);
        access = System.getProperty("access");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        login = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        verCarrosDisponiveis = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textVerCarrosDiponiveis = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textInserir = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        odometer = new javax.swing.JButton();
        location = new javax.swing.JButton();
        fuel = new javax.swing.JButton();
        battery = new javax.swing.JButton();
        informacaoGeral = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textInspecionarCarro = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textLogs = new javax.swing.JTextArea();
        limpar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(login)
                .addContainerGap(488, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(login)
                .addContainerGap(222, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Login", jPanel1);

        verCarrosDisponiveis.setText("Ver carros disponiveis");
        verCarrosDisponiveis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCarrosDisponiveisActionPerformed(evt);
            }
        });

        textVerCarrosDiponiveis.setColumns(20);
        textVerCarrosDiponiveis.setRows(5);
        jScrollPane2.setViewportView(textVerCarrosDiponiveis);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(verCarrosDisponiveis)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verCarrosDisponiveis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Carros Disponiveis", jPanel2);

        jLabel2.setText("Número do carro:");

        textInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInserirActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(211, 211, 211));

        odometer.setText("Odometer");
        odometer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odometerActionPerformed(evt);
            }
        });

        location.setText("Location");
        location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationActionPerformed(evt);
            }
        });

        fuel.setText("Fuel");
        fuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuelActionPerformed(evt);
            }
        });

        battery.setText("Battery");
        battery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batteryActionPerformed(evt);
            }
        });

        informacaoGeral.setText("Informação Geral");
        informacaoGeral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informacaoGeralActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(odometer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fuel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(battery, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informacaoGeral, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(odometer)
                    .addComponent(location)
                    .addComponent(fuel)
                    .addComponent(battery)
                    .addComponent(informacaoGeral))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textInspecionarCarro.setColumns(20);
        textInspecionarCarro.setRows(5);
        jScrollPane1.setViewportView(textInspecionarCarro);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textInserir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Inspecionar Carro", jPanel3);

        jLabel1.setText("Logs:");

        textLogs.setColumns(20);
        textLogs.setRows(5);
        jScrollPane3.setViewportView(textLogs);

        limpar.setText("Limpar Logs");
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(limpar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limpar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
        OpenBrowser openBrowser = new OpenBrowser("http://localhost:8000/login");
        textLogs.append("Browser should be open!\n");
    }//GEN-LAST:event_loginActionPerformed

    private void verCarrosDisponiveisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCarrosDisponiveisActionPerformed
        // TODO add your handling code here: bla bla bla
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\messi\\AppData\\Local\\Temp\\results.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();
                int x = 1;
                for (String v : vehicleIds) {
                    Vehicle vehicle = new Vehicle(v, access);
                    VehicleInfo info = vehicle.info();
                    
                JsonParser parser = new JsonParser();
                JsonObject obj = parser.parse(gson.toJson(info)).getAsJsonObject();
                String id = obj.get("id").getAsString();
                String make = obj.get("make").getAsString();
                String model = obj.get("model").getAsString();
                String year = obj.get("year").getAsString();
                textVerCarrosDiponiveis.append("Carro número " + x + "\n");
                textVerCarrosDiponiveis.append("ID: " + id + "\n");
                textVerCarrosDiponiveis.append("Make: " + make + "\n");
                textVerCarrosDiponiveis.append("Model: " + model + "\n");
                textVerCarrosDiponiveis.append("Year: " + year + "\n");
                textVerCarrosDiponiveis.append("---" + "\n");
                x++;
                }

            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_verCarrosDisponiveisActionPerformed

    private void textInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInserirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textInserirActionPerformed

    private void informacaoGeralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informacaoGeralActionPerformed
        // TODO add your handling code here:
        int numeroCarro = Integer.parseInt(textInserir.getText()) -1;

        textLogs.setText(textLogs.getText() + "Número do carro: " + textInserir.getText() + "\n");

        textLogs.setText(textLogs.getText() + numeroCarro);

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\messi\\AppData\\Local\\Temp\\results.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                // instantiate the first vehicle in the vehicle id list
                Vehicle vehicle = new Vehicle(vehicleIds[numeroCarro], access);

                VehicleInfo info = vehicle.info();

                System.out.println(gson.toJson(info));
                textInspecionarCarro.setText("");
                int numeroCarroDisplay = numeroCarro + 1;
                textInspecionarCarro.setText("Carro número " + numeroCarroDisplay + ":" + "\n");
                textInspecionarCarro.append("\n");
                JsonParser parser = new JsonParser();
                JsonObject obj = parser.parse(gson.toJson(info)).getAsJsonObject();
                String id = obj.get("id").getAsString();
                String make = obj.get("make").getAsString();
                String model = obj.get("model").getAsString();
                String year = obj.get("year").getAsString();
                textInspecionarCarro.append("ID: " + id + "\n");
                textInspecionarCarro.append("Make: " + make + "\n");
                textInspecionarCarro.append("Model: " + model + "\n");
                textInspecionarCarro.append("Year: " + year + "\n");

            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_informacaoGeralActionPerformed

    private void odometerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odometerActionPerformed
        // TODO add your handling code here:

        int numeroCarro = Integer.parseInt(textInserir.getText()) -1;

        textLogs.setText(textLogs.getText() + "Número do carro: " + textInserir.getText() + "\n");

        textLogs.setText(textLogs.getText() + numeroCarro);

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\messi\\AppData\\Local\\Temp\\results.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                // instantiate the first vehicle in the vehicle id list
                Vehicle vehicle = new Vehicle(vehicleIds[numeroCarro], access);

                // Read the vehicle's odometer
                SmartcarResponse<VehicleOdometer> odometerResponse = vehicle.odometer();

                VehicleOdometer odometerData = odometerResponse.getData();

                double odometer = odometerData.getDistance();

                String resul = "Registo de kilometros: " + odometer + " Km";

                int numeroCarroDisplay = numeroCarro + 1;
                textInspecionarCarro.setText("Carro número " + numeroCarroDisplay + ":" + "\n");
                textInspecionarCarro.append("\n");
                
                textInspecionarCarro.append(resul);

            } catch (SmartcarException ex) {
                textInspecionarCarro.setText("Não há informações relativas a este tópico.");
                //Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_odometerActionPerformed

    private void locationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationActionPerformed
        // TODO add your handling code here:
        int numeroCarro = Integer.parseInt(textInserir.getText()) -1;

        textLogs.setText(textLogs.getText() + "Número do carro: " + textInserir.getText() + "\n");

        textLogs.setText(textLogs.getText() + numeroCarro);

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\messi\\AppData\\Local\\Temp\\results.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                // instantiate the first vehicle in the vehicle id list
                Vehicle vehicle = new Vehicle(vehicleIds[numeroCarro], access);

                // Read the vehicle's location
                SmartcarResponse<VehicleLocation> locationResponse = vehicle.location();

                VehicleLocation locationData = locationResponse.getData();

                String longitude = "Longitude: " + locationData.getLongitude();
                String latitude = "Latitude: " + locationData.getLatitude();
                String resul = latitude + "\n" + longitude;
                
                int numeroCarroDisplay = numeroCarro + 1;
                textInspecionarCarro.setText("Carro número " + numeroCarroDisplay + ":" + "\n");
                textInspecionarCarro.append("\n");
                
                textInspecionarCarro.append(resul);

            } catch (SmartcarException ex) {
                textInspecionarCarro.setText("Não há informações relativas a este tópico.");
                //Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_locationActionPerformed

    private void fuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuelActionPerformed
        // TODO add your handling code here:
        int numeroCarro = Integer.parseInt(textInserir.getText()) -1;

        textLogs.setText(textLogs.getText() + "Número do carro: " + textInserir.getText() + "\n");

        textLogs.setText(textLogs.getText() + numeroCarro);

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\messi\\AppData\\Local\\Temp\\results.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                // instantiate the first vehicle in the vehicle id list
                Vehicle vehicle = new Vehicle(vehicleIds[numeroCarro], access);

                // Read the vehicle's fuel
                SmartcarResponse<VehicleFuel> fuelResponse = vehicle.fuel();

                VehicleFuel fuelData = fuelResponse.getData();

                
                String resul1 = "Combustível disponível: " + fuelData.getPercentRemaining() + "%";
                String resul2 = "Distância restante: " + fuelData.getRange() + "kms";
                String resul = resul1 + "\n" + resul2;
                
                int numeroCarroDisplay = numeroCarro + 1;
                textInspecionarCarro.setText("Carro número " + numeroCarroDisplay + ":" + "\n");
                textInspecionarCarro.append("\n");
                
                textInspecionarCarro.append(resul);

            } catch (SmartcarException ex) {
                textInspecionarCarro.setText("Não há informações relativas a este tópico.");
                //Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fuelActionPerformed

    private void batteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batteryActionPerformed
        // TODO add your handling code here:
                int numeroCarro = Integer.parseInt(textInserir.getText()) -1;

        textLogs.setText(textLogs.getText() + "Número do carro: " + textInserir.getText() + "\n");

        textLogs.setText(textLogs.getText() + numeroCarro);

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\messi\\AppData\\Local\\Temp\\results.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                // instantiate the first vehicle in the vehicle id list
                Vehicle vehicle = new Vehicle(vehicleIds[numeroCarro], access);

                // Read the vehicle's battery
                SmartcarResponse<VehicleBattery> batteryResponse = vehicle.battery();

                VehicleBattery batteryData = batteryResponse.getData();

                String resul = "Bateria disponível: " + batteryData.getPercentRemaining() + "%";
                String resul2 = "Distância restante: " + batteryData.getRange() + "kms";
                String resul3 = resul + "\n" + resul2;
                
                int numeroCarroDisplay = numeroCarro + 1;
                textInspecionarCarro.setText("Carro número " + numeroCarroDisplay + ":" + "\n");
                textInspecionarCarro.append("\n");
                
                textInspecionarCarro.append(resul3);

            } catch (SmartcarException ex) {
                textInspecionarCarro.setText("Não há informações relativas a este tópico.");
                //Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_batteryActionPerformed

    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        // TODO add your handling code here:
        textLogs.setText("");
    }//GEN-LAST:event_limparActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        textVerCarrosDiponiveis.setText("");
        textInspecionarCarro.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton battery;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fuel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton informacaoGeral;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton limpar;
    private javax.swing.JButton location;
    private javax.swing.JButton login;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton odometer;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField textInserir;
    private javax.swing.JTextArea textInspecionarCarro;
    private javax.swing.JTextArea textLogs;
    private javax.swing.JTextArea textVerCarrosDiponiveis;
    private javax.swing.JButton verCarrosDisponiveis;
    // End of variables declaration//GEN-END:variables

}
